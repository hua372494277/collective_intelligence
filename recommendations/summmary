基于物品过滤  
    优点：  
    1 在针对大数据集生成推荐列表时，基于物品进行过滤的方式明显要更快
    2 对于稀疏数据集（矩阵），基于物品的过滤方法通常要优于基于用户的过滤方法，而对于密集型数据集而言，两者的效果则几乎一样

    原因： 稀疏型数据集存在每个用户的评价的物品存在小众群体性。因此两个用户之间计算相似度时，较难。

    缺点：
    1 在维护物品相似度矩阵时，额外开销较大

基于用户过滤
    优点：
    1 易于实现，而且无需额外步骤，适用于规模较小的，变化非常频繁的内存数据
  
问题 1： 
    当存在一个用户有如下情况：  
            M 1     M 2     M 3  
    U 1     3.0     3.0     1.0  
    如果电影M 1只被U 1（User 1）评论了，而且给了3.0分。那么当计算M 1和其他电影的相似性时，比如M 1和M 2的欧式距离时，就只能 3.0 - 3.0 = 0.0，那么可以认为 M 1和M 2是完全相似的。但现实中应该不会这样，所以相似得分矩阵要周期性更新。

    如果U 1只评论了M 1，那么也存在类似的问题，只能将U 1和其他用户在M 1上面的评分进行比较。

    但是以上两个情况在新用户进入系统，和新电影上线时，都会发生。

问题2：
    数据中可能存在岛屿现象。
    一个小群体的用户都只评论已一部分电影，导致在计算tanimoto系数时，由于计算公式：
    tanimoto(A, B) = (A^B) /  (A|B - A^B)
    所以小群体中的用户只和该群体中的用户的tanimoto相似度大于0，和其他用户的相似系数=0
    那么就没有办法推荐电影，因为他们都看过对方看过的电影，而没有互异的数据。